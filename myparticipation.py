# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'myparticipation.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
import psycopg2
import sys
import datetime

user_id = ''

class Ui_myparticipation(object):
    def setupUi(self, myparticipation):
        self.window = myparticipation
        myparticipation.setObjectName("myparticipation")
        myparticipation.resize(1000, 680)
        myparticipation.setMinimumSize(QtCore.QSize(1000, 680))
        myparticipation.setMaximumSize(QtCore.QSize(1000, 680))
        self.MyParticipateWESALON = QtWidgets.QLabel(myparticipation)
        self.MyParticipateWESALON.setGeometry(QtCore.QRect(340, 10, 351, 81))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.MyParticipateWESALON.setFont(font)
        self.MyParticipateWESALON.setObjectName("MyParticipateWESALON")
        self.ParticipationTable = QtWidgets.QTableWidget(myparticipation)
        self.ParticipationTable.setGeometry(QtCore.QRect(60, 130, 861, 441))
        self.ParticipationTable.setObjectName("ParticipationTable")
        self.ParticipationTable.setColumnCount(9)
        self.ParticipationTable.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.ParticipationTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.ParticipationTable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.ParticipationTable.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.ParticipationTable.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.ParticipationTable.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.ParticipationTable.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.ParticipationTable.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.ParticipationTable.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.ParticipationTable.setHorizontalHeaderItem(8, item)
        self.CancelJoin = QtWidgets.QPushButton(myparticipation)
        self.CancelJoin.setGeometry(QtCore.QRect(230, 600, 93, 28))
        self.CancelJoin.setObjectName("CancelJoin")
        self.FlushButton = QtWidgets.QPushButton(myparticipation)
        self.FlushButton.setGeometry(QtCore.QRect(650, 600, 93, 28))
        self.FlushButton.setObjectName("FlushButton")

        self.ParticipationTable.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.ParticipationTable.setSelectionBehavior(QAbstractItemView.SelectRows)

        self.CancelJoin.clicked.connect(self.CancelAct)
        self.FlushButton.clicked.connect(self.LoadTable)

        self.retranslateUi(myparticipation)
        QtCore.QMetaObject.connectSlotsByName(myparticipation)


    def retranslateUi(self, myparticipation):
        _translate = QtCore.QCoreApplication.translate
        myparticipation.setWindowTitle(_translate("myparticipation", "Form"))
        self.MyParticipateWESALON.setText(_translate("myparticipation", "我参加的WESALON"))
        item = self.ParticipationTable.horizontalHeaderItem(0)
        item.setText(_translate("myparticipation", "活动ID"))
        item = self.ParticipationTable.horizontalHeaderItem(1)
        item.setText(_translate("myparticipation", "活动名字"))
        item = self.ParticipationTable.horizontalHeaderItem(2)
        item.setText(_translate("myparticipation", "举办人"))
        item = self.ParticipationTable.horizontalHeaderItem(3)
        item.setText(_translate("myparticipation", "开始时间"))
        item = self.ParticipationTable.horizontalHeaderItem(4)
        item.setText(_translate("myparticipation", "结束时间"))
        item = self.ParticipationTable.horizontalHeaderItem(5)
        item.setText(_translate("myparticipation", "活动地点"))
        item = self.ParticipationTable.horizontalHeaderItem(6)
        item.setText(_translate("myparticipation", "活动容量"))
        item = self.ParticipationTable.horizontalHeaderItem(7)
        item.setText(_translate("myparticipation", "已加入人数"))
        item = self.ParticipationTable.horizontalHeaderItem(8)
        item.setText(_translate("myparticipation", "活动状态"))
        self.CancelJoin.setText(_translate("myparticipation", "取消加入"))
        self.FlushButton.setText(_translate("myparticipation", "刷新"))

    def CancelAct(self):
        if self.ParticipationTable.item(0, 0) == None:
            return
        row = self.ParticipationTable.currentRow()
        newstu = user_id
        newact = self.ParticipationTable.item(row, 0).text()
        newstart = self.ParticipationTable.item(row, 3).text()
        newend = self.ParticipationTable.item(row, 4).text()
        oldcurrent = self.ParticipationTable.item(row, 7).text()
        newcurrent1 = int(oldcurrent) - 1
        newcurrent2 = str(newcurrent1)
        print("qq")
        try:
            print("into try")
            conn = psycopg2.connect(
                user='postgres',
                password='patrick+',
                host='127.0.0.1',
                database='postgres',
                port=5432
            )
            cursor = conn.cursor()
            query2 = "DELETE FROM PARTICIPATE WHERE ACT_ID = %s AND STU_ID = %s"
            cursor.execute(query2, (newact, newstu))
            conn.commit()
            query3 = "UPDATE ACTIVITY SET CURRENTNUM = %s WHERE ACT_ID = %s"
            cursor.execute(query3, (newcurrent1, newact))
            conn.commit()
            self.LoadTable()

        except psycopg2.Error as err:
            print("We have a problem")
            print(err)
        else:
            conn.close()

    def LoadTable(self):
        nowtime1 = datetime.datetime.now()
        try:
            conn = psycopg2.connect(
                user = 'postgres',
                password = 'patrick+',
                host = '127.0.0.1',
                database = 'postgres',
                port = 5432
            )
            cursor = conn.cursor()
            query = "SELECT * FROM ACTIVITY WHERE ACT_ID IN (SELECT ACT_ID FROM PARTICIPATE WHERE STU_ID = %s)"
            cursor.execute(query, (user_id, ))
            rows = cursor.fetchall()
            row = cursor.rowcount  # 取得记录个数，用于设置表格的行数
            self.ParticipationTable.setRowCount(row)
            if row == 0:
                return
            vol = len(rows[0])  # 取得字段数，用于设置表格的列数

            query1 = "SELECT ACT_ID, STU_ID FROM PARTICIPATE"
            cursor.execute(query1)
            partable = cursor.fetchall()
            parrow = cursor.rowcount  # 取得记录个数，用于设置表格的行数

            

            for i in range(row):
                for j in range(vol):
                    temp_data = rows[i][j]  # 临时记录，不能直接插入表格
                    data = QTableWidgetItem(str(temp_data))  # 转换后可插入表格
                    self.ParticipationTable.setItem(i, j, data)

                if rows[i][3] > nowtime1:
                    self.ParticipationTable.setItem(i, 8, QTableWidgetItem(str("reserved")))
                elif rows[i][4] < nowtime1:
                    self.ParticipationTable.setItem(i, 8, QTableWidgetItem(str("finished")))
                else:
                    self.ParticipationTable.setItem(i, 8, QTableWidgetItem(str("ongoing")))


        except psycopg2.Error as err:
            print(err)
        else:
            conn.close()